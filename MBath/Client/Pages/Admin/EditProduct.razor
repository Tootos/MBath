@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductSrvc ProductService 
@inject ICategorySrvc CategoryService
@inject IVariantSrvc VariantService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSruntime

@if (loading)
{
    <span>@message</span>
}
else
{
    @if (product.Editing)
    {
        <h3>Edit "@product.Name"</h3>
    }
    else if(product.IsNew)
    {
        <h3>Create a new product</h3>
    }

    <EditForm Model="product" OnValidSubmit="AddorUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="product.ImgURL" class="form-control"></InputText>
        </div>
        <div class="mb-0" style="display:flex; flex-wrap: wrap; flex-direction:row; justify-content:center;">
            @if (!string.IsNullOrEmpty(product.ImgURL))
            {
                <img src="@product.ImgURL" />
            }
            else
            {
                foreach(var image in product.Images)
                {
                   <MudCard Class="ma-1">
                       <MudCardContent>
                           <MudImage Src="@image.Data"></MudImage>
                       </MudCardContent>
                       <MudCardActions Style="justify-content:center;">
                           <MudButton Variant="MudBlazor.Variant.Filled" 
                           Color="Color.Error" 
                           OnClick="(()=>RemoveImage(Id))">Remove</MudButton>
                       </MudCardActions>

                   </MudCard>
                }
            }
        </div>
        <div class="mb-0">
            <label for="images">Image(s)</label>
            <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>
        <div class="mb-0">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="product.Description" class="form-control"></InputText>
        </div>
        <hr />
        <div class="header">
            <div class="col">Variant</div>
            <div class="col">Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>

        @foreach(var productVariant in product.ProductVariants)
        {
            <div class="row">
                <div class="col"> 
                    @if (productVariant.IsNew)
                    {
                        <div class="mb-0">
                            <InputText id="name" @bind-Value="variantTxtbox" class="form-control"></InputText>
                        </div>
                    }
                    else
                    {
                        <InputSelect disabled="@productVariant.Deleted" @bind-Value="productVariant.VariantId" class="form-control">
                            @foreach (var variant in VariantService.AdminVariants)
                            {
                                <option value="@variant.Id.ToString()">@variant.Name</option>
                            }
                        </InputSelect>
                    }                   
            </div>
            
            <div class="col">
                    <InputNumber @bind-Value="productVariant.Price" class="form-control" disabled="@productVariant.Deleted"></InputNumber>
            </div>                
            <div class="col col-visible">
                    <InputCheckbox @bind-Value="productVariant.Visible" style="transform:scale(1.5,1.5);" disabled="@productVariant.Deleted"></InputCheckbox>
            </div>
            <div class="col">
                    <button type="button" class="btn btn-primary" disabled="@productVariant.Deleted" @onclick="@(() => RemoveVariant(productVariant.VariantId))">
                        <i class="oi oi-trash"></i>
                    </button>
            </div>               
        </div>

        }       
        <br />
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr />
        <div class="mb-0">
            <lavel for="category">Category</lavel>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.GetCategoriesWithProducts())
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />

        <div class="form-check">
                <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
                <label for="visible" class="form-check-label">Visible</label>
        </div>
        
        <hr />
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary></ValidationSummary>

    </EditForm>

    @if (!product.IsNew)
    {
        <button type="button" @onclick="DeleteProduct" class="btn btn-danger float-start">
            Delete Product
        </button> 
    }
}



@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string message = string.Empty;

    string btnText = string.Empty;

    string variantTxtbox= string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetAdminCategoriesAsync();
        await VariantService.GetVariantsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {

            product = new Product { IsNew = true };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProductAsync(Id)).Data;
            if (dbProduct == null)
            {
                message = $"Product with Id of {Id} does not exist.";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";

        }
        loading = false;
    }

    async void AddorUpdateProduct()
    {
        if (product.IsNew)
        {
            foreach (var variant in product.ProductVariants)
            {
                if (variant.IsNew)
                {
                    variant.VariantId = (await VariantService.CreateVariantAsync(variantTxtbox)).Id;
                }
            }
            var result = await ProductService.AddProductAsync(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}");
        }
        else
        {
            product.IsNew = false;

            foreach(var variant in product.ProductVariants)
            {
                if (variant.IsNew)
                {
                    variant.VariantId = (await VariantService.CreateVariantAsync(variantTxtbox)).Id;
                }
            }
            product = await ProductService.UpdateProductAsync(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}",true);
        }
    }

    void AddVariant()
    {
        product.ProductVariants
        .Add(new ProductVariantInfo { IsNew = true, ProductId = product.Id });

    }



    async void DeleteProduct()
    {
        bool confirm = await JSruntime.InvokeAsync<bool>("confirm",$"Do you want to delete {product.Name} ?");
        if (confirm)
        {
            await ProductService.DeleteProductAsync(product.Id);
            NavigationManager.NavigateTo("admin/products");
        }
    }

    void RemoveVariant(int variantId)
    {
        var variant = product.ProductVariants.Find(pv=>pv.VariantId==variantId);
        if(variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.ProductVariants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image { Data = imageData });
        }
    }

    void RemoveImage(int imageId)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == imageId);
        if (image!= null)
        {
            product.Images.Remove(image);
        }
    }
}
