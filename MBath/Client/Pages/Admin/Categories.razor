@page "/admin/categories"
@inject ICategorySrvc CategoryService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable
@inject IJSRuntime JSruntime


<h3>Categories</h3>


<div class="header">
    <div class="col">Id</div>
    <div class="col">Image</div>   
    <div class="col">Name</div>
    <div class="col">Url</div>
    <div class="col">Parent</div>
    <div class="col">Has Products</div>
    <div class="col">Visible</div>
    <div class="col"></div>
</div>

@foreach (var category in CategoryService.AdminCategories)
{
    @if (category.Editing)
    {      
        <EditForm Model="editingCategory" OnSubmit="UpdateCategory">
            <div class="row">
                <div class="col">
                    @editingCategory.Id
                </div>
                <div class="col">
                    <img src="@editingCategory.ImgURL">
                </div>               
                <div class="col">
                    <InputText @bind-Value="editingCategory.Name" class="form-control" placeholder="Name"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingCategory.Url" class="form-control" placeholder="Url"></InputText>
                </div>

                <div class="col">
                    <InputSelect id="category" @bind-Value="editingCategory.ParentId" class="form-control">
                        @foreach (var category in CategoryService.AdminCategories.Where(c => !c.HasProducts && !c.IsNew))
                        {
                            <option value="@category.Id">@category.Name/@category.Url</option>
                        }
                    </InputSelect>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="editingCategory.HasProducts" style="transform: scale(1.5,1.5);"></InputCheckbox>
                       
                    
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="editingCategory.Visible" style="transform: scale(1.5,1.5);"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button  class="btn btn-primary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>

            </div>
            <div class="row">
                <div class="col">
                    <InputFile id="imageUrl" OnChange="OnFileChange"></InputFile>
                </div>
            </div>

        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">
                 @category.Id
            </div>
            <div class="col">
                <img src="@category.ImgURL">
            </div>
            <div class="col">
                @category.Name
            </div>
            <div class="col">
                @category.Url
            </div>
            <div class="col col-visible">
                <span>@(category.HasProducts ? "✔️" : "")</span>
            </div>
            <div class="col col-visible">
                <span>@(category.Visible ? "✔️" : "")</span>
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="(()=>EditCategory(category))">
                    <i class="oi oi-pencil"></i>
                </button>
                <button class="btn btn-primary" @onclick="(()=>DeleteCategory(category))">
                    <i class="oi oi-trash"></i>
                </button>
            </div>

        </div>
    }
    
}
<button class="btn btn-primary float-end" @onclick="CreateNewCategory">
    <i class="oi oi-plus">Add Category</i>
</button>


@code {
    Category editingCategory =null;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetAdminCategoriesAsync();
        CategoryService.CategoriesChanged += StateHasChanged;
    }

    public void Dispose()
    {
        CategoryService.CategoriesChanged -= StateHasChanged;

    }

    private void CreateNewCategory()
    {
        editingCategory = CategoryService.CreateNewCategory();
    }

    private void EditCategory(Category category)
    {
        category.Editing = true;
        editingCategory = category;
    }

    private async Task UpdateCategory()
    {
        if (editingCategory.IsNew)
        {
            await CategoryService.AddCategoryAsync(editingCategory);
        }
        else
        {
            await CategoryService.UpdateCategoryAsync(editingCategory);
        }
        editingCategory = new Category();
    }

    private async Task CancelEditing()
    {
        editingCategory = new Category();
        await CategoryService.GetAdminCategoriesAsync();
    }
    private async Task DeleteCategory(Category category)
    {

        bool confirm = await JSruntime.InvokeAsync<bool>("confirm", $"Do you want to delete Category  {category.Name} ?");
        if (confirm)
        {

            await CategoryService.DeleteCategoryAsync(category.Id);
            await CategoryService.GetAdminCategoriesAsync();
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(1))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            editingCategory.ImgURL = imageData;
        }
    }
}
