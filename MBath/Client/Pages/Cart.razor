@page "/cart"
@inject ICartSrvc CartService

@if (cartProducts == null|| cartProducts.Count==0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach(var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImgUrl" class="image"/>
                </div>
                <div class="name">
                    <h5> <a href="/product/@product.ProductId">@product.ProductName</a></h5>                   
                    <input type="number" value="@product.Quantity"
                    @onchange="@((ChangeEventArgs e) => UpdateQuantity(e,product))"
                    class="form-control input-quantity"
                    min="1"/>
                    <button class="btn-delete" @onclick="@(()=>
                        RemoveProductFromCart(@product.ProductId, @product.VariantId)
                    )">Delete</button>
                    </div>
               <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count) : $ @cartProducts.Sum(@product=>product.Price*product.Quantity)
        </div>
        </div>

}




@code {
    List<CartProductResponse> cartProducts = null;

    string message = "Loading your cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }



    private async Task LoadCart()
    {
        if ((await CartService.GetCartProductsAsync()).Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProductsAsync();
        }
    }

    private async Task RemoveProductFromCart(int productId, int variantId)
    {
        await CartService.RemoveProductFromCartAsync(productId, variantId);
        await LoadCart();

    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse item)
    {
        item.Quantity = int.Parse(e.Value.ToString());       

        await CartService.UpdateQuantity(item);
    }
}
