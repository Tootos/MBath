@page "/cart"
@inject ICartSrvc CartService
@inject IOrderSrvc OrderService
@inject NavigationManager NavigationManager
@inject IAuthenticationSrvc AuthenticationService

<PageTitle>Your Cart</PageTitle>

@if (cartProducts == null|| cartProducts.Count==0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach(var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    @if (!string.IsNullOrEmpty(product.ImgUrl))
                    {
                        <img src="@product.ImgUrl" class="image" />
                    }
                    else
                    {
                        <img src="@product.Images[0].Data" class="image" alt="@product.ProductName"/>
                    }
                    
                </div>
                <div class="name">
                    <h5> <a href="/product/@product.ProductId">@product.ProductName</a></h5>   
                    <p>@product.VariantName</p>
                    <input type="number" value="@product.Quantity"
                    @onchange="@((ChangeEventArgs e) => UpdateQuantity(e,product))"
                    class="form-control input-quantity"
                    min="1"/>
                    <button class="btn-delete" @onclick="@(()=>
                        RemoveProductFromCart(@product.ProductId, @product.VariantId)
                    )">Delete</button>
                    </div>
               <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count) : $ @cartProducts.Sum(@product=>product.Price*product.Quantity)
        </div>
    </div>
    if (isAuthenticated)
    {
        <h5>Delivery Address</h5>
        <AddressForm/>
    }
    <button @onclick= "PlaceOrder" class="btn alert-success float-end mt-1">Checkout</button>

}




@code {
    List<CartProductResponse> cartProducts = null;

    string message = "Loading your cart...";

    bool OrderPlaced = false;

    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthenticationService.IsAuthenticated();
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();

        cartProducts = await CartService.GetCartProductsAsync();

        if (cartProducts == null || cartProducts.Count==0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }
    }

    private async Task RemoveProductFromCart(int productId, int variantId)
    {
        await CartService.RemoveProductFromCartAsync(productId, variantId);
        await LoadCart();

    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse item)
    {
        item.Quantity = int.Parse(e.Value.ToString());       

        await CartService.UpdateQuantity(item);
    }

    private async Task PlaceOrder()
    {
        string url= await OrderService.CreateOrder();
        NavigationManager.NavigateTo(url);

        /*
        await CartService.GetCartItemsCount();

        OrderPlaced = true;
        */
    }
}
