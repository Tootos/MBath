@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartSrvc CartService

<div class="dropdown">
    <button @onclick="ToggleUserMenu"
        @onfocusout="HideUserMenu"
        class="btn btn-secondary dropdown-toggle user-button">
    <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a href="profile" class="dropdown-item">Your Profile</a>
                <a href="orders" class="dropdown-item">Orders</a>
                <hr />
                <Admin />
                <button class="dropdown-item" @onclick="Logout">Log out</button>
            </Authorized>
            <NotAuthorized>
                <a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)"
                class="dropdown-item">Log in</a>                
                <a href="register" class="dropdown-item">Register</a>
            </NotAuthorized>

        </AuthorizeView>        
    </div>

</div>
@code {
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await LocalStorageService.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await CartService.GetCartItemsCount();
        NavigationManager.NavigateTo("");
    }

}
